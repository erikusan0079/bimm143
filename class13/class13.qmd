---
title: "Class13: RNASeq Analysis with DESeq2"
author: "Yu (Ericsson) Cao (PID: A16421048)"
format: pdf
---

In today's class we will explore and analyze data from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).


## Data Import

We have two input files, so-called "count data" and "col data". 

```{r}
metadata <- read.csv('airway_metadata.csv')
counts <- read.csv('airway_scaledcounts.csv',row.names = 1)
```


## Data Explore 

>Q1. How many genes are in this dataset? 

```{r}
summary(counts)
```

A: 38694  

>Q2. How many ‘control’ cell lines do we have? 

```{r}
summary(metadata)
metadata
```

A: 4

## Toy differential gene expression

Time to do some analysis.

We have 4 control and 4 treated samples/experiments/columns.

Make sure the metadata id column matches the columns in our count data.

```{r}
colnames(counts)
```

```{r}
metadata$id
```

```{r}
colnames(counts) == metadata$id
```

To check that all elements of a vector are TRUE we can use the `all()` function.

```{r}
all(c(T, T, T, F))
```

```{r}
all(colnames(counts)[-1] == metadata$id)
```

To start I will calculate the `control.mean` and `treated.mean` values and compare them.

- Identify and extract the `control` only columns
- Determine the mean value for each gene (i.e. row)
- Do the same for `treated`.

```{r}
# Where does it tell me which columns are control?
control.inds <- metadata$dex == "control"
control.counts <- counts[ , control.inds]
control.mean <- apply(control.counts, 1, mean)
```

```{r}
# Same for treated
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[ , treated.inds]
treated.mean <- apply(treated.counts, 1, mean)
```

Let's store these together for ease of book-keeping

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

Have a quick view of this data:

```{r}
plot(meancounts)
```

This data is screeming at us to log transform as it is so heavily skewed and over such a wide range.

```{r}
plot(meancounts, log="xy")
```


I want to compare the treated and the control values here and we will use Fold change in log2 units to do this. log2(Treated/Control)

```{r}
log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)
meancounts$log2fc <- log2fc
```

No difference
```{r}
log2(20/20)
```

A doubling in the treated:
```{r}
log2(20/10)
```

```{r}
log2(5/10)
```

```{r}
log2(40/10)
```
A common rule of thumb cutoff for calling a gene "differentially expressed" is a log2 fold-change value of either > +2 or < -2 for "up refulated" and "down regulated" respectively.

```{r}
head(meancounts)
```

We first need to remove zero count genes - as we cannot say anything about these genes anyway and their division of log values are messing things up (divided by zero) or the -inf log problem.

```{r}
sum(meancounts$log2fc > +2, na.rm=T)
to.rm.ind <- rowSums(meancounts[,1:2]==0) > 0
mycounts <- meancounts[!to.rm.ind, ]
```

> Q. How many genes do we have left that we can say something about? (i.e. they don't have any zero counts)

```{r}
nrow(mycounts)
```

>Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

```{r}
up.ind <- mycounts$log2fc > 2
sum(up.ind)
```


>Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

```{r}
down.ind <- mycounts$log2fc < (-2)
sum(down.ind)
```

>Q10. Do you trust these results? Why or why not?

A: Not necessariliy, having a dimension for p-value will make our conclusion more robust. We are not sure if the differences are significant yet since we are still missing stats.


## DESeq analysis

Let's do this properly with the help of the DESeq2 package

```{r}
#| message: false

library(DESeq2)
```

We have to use a specific data object for working with DESeq.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                              colData = metadata,
                              design = ~dex)
```
Run our main analysis with the `DESeq()` function
```{r}
dds <- DESeq(dds)
```

To get the results out of our `dds` object we can use the DESeq function called `results()`:

```{r}
res <- results(dds)
head(res)
```

# Volcano Plot

A very common and useful summary results figure from this type of analysis is called a volcano plot - a plot of log2FC vs P-value. We use the `padj` the adjusted P-value for multiple testing.

```{r}
plot(res$log2FoldChange, res$padj)
```

```{r}
plot(res$log2FoldChange, -log(res$padj),
     xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```

Add some color to the plot
```{r}
plot(res$log2FoldChange, -log(res$padj),
     xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")



mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"


plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )


abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

```{r}
log(0.00005)
log(0.5)
```

## Add Annotation data

We will use one of Bioconductor’s main annotation packages to help with mapping between various ID schemes. Here we load the AnnotationDbi package and the annotation data package for humans org.Hs.eg.db.

```{r}
head(res)
```
```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```

I also want entrez IDs

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="ENTREZID",          # The new format we want to add
                     multiVals="first")

head(res)
```

```{r}
res$name <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="GENENAME",          # The new format we want to add
                     multiVals="first")
head(res)
```

## Pathway analysis

Now that I have added the necessary annotation data I can talk to different databases that use these IDs. 

We will use the `gage` package to do geneset analysis (a.k.a. pathway analysis, geneset enrichment, overlap analysis)

```{r}
library(pathview)
library(gage)
library(gageData)
```

We will use KEGG first ()
```{r}
data(kegg.sets.hs)
head(kegg.sets.hs, 2)
```

The main `gage()` function requires a named vector of fold changes, where the names of the values are the Entrez gene IDs.

```{r}
foldchange <- res$log2FoldChange
names(foldchange) <- res$entrez
head(foldchange)
```

Run the analysis

```{r}
# Get the results
keggres = gage(foldchange, gsets=kegg.sets.hs)
```

Let's look at what is in our results here

```{r}
attributes(keggres)
```

```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

I can now use the returned pathway IDs from KEGG as input to the `pathview` package to make pathway figures with our DEGs

```{r}
pathview(gene.data=foldchange, pathway.id="hsa05310")
```

![Graft-versus-host disease, Type I diabetes and the Asthma pathway](hsa05310.pathview.png)



